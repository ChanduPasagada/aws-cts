
  Demo 1: Create an Auto Scaling Group (ASG)
  -------------------------------------------
	
  -> Open EC2 Management Console 
	-> Select a region (ex: N.Virginia)
  
  -> Create a Launch Template
	-> Click on 'Launch Templates' left menu option (Instances -> Launch Templates)
	-> Click on "Create launch template" button
		-> Launch template name: Some name (ex: LT1)
		-> Amazon Machine Image (AMI) : Select Amazon Linux 2 AMI
		-> Instance type: t2.micro
		-> Key pair name: select a key pair you have for the region
		-> Firewall (security groups) : Select an existing SG (ex: webaccess)
		-> Configure Storage: leave the defaults

		-> Click on the Advanced details
			-> Leave all as defaults
			-> Add the following script in the "User data" (towards the end)
				-> The script installs and starts a Web server and adds a web page.

				----------------------------------------------------
				#!/bin/bash
				yum update -y
				yum install -y httpd
				systemctl start httpd
				systemctl enable httpd
				EC2AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone) 
				echo '<center><h1>This Amazon EC2 instance is located in Availability Zone: AZID </h1></center>' > /var/www/html/index.txt
				sed "s/AZID/$EC2AZ/" /var/www/html/index.txt > /var/www/html/index.html
				----------------------------------------------------

		-> Click on "Create Launch Template" button.

   -> Create an 'Auto Scaling Group' (ASG)
	-> Click on 'Auto Scaling Group' menu option from left menu (Auto Scaling -> Auto Scaling Group)
	-> Click on 'Create auto scaling group' button
		-> Auto Scaling group name: some name (ex: ASG1)
		-> Launch template: selected the one you created earlier (ex: LT1)
		-> Click Next
		-> VPC: keep the default
		-> Availability Zones and subnets: 
			-> Select three subnets (ex: us-east-1a, 1b, 1c)
		-> Click Next
		-> As we do not have any load balancer at the moment, you just keep 'No load balancer'
		-> Monitoring: Check 'Enable group metrics collection within CloudWatch'
		  (there is no charge for this, so you can enable it to get CloudWatch metrics for the group)
		-> Click Next
		-> Group size
			Desired capacity: 2
			Minimum capacity: 2
			Maximum capacity: 4
		-> Click Next & then Next
		-> Click on 'Create auto scaling group' button.

   -> Check the instances 
	
	-> Click on 'Instances' menu option and see you have two instances launched.

   -> Check various option we have in your ASG
	-> Open the ASG you have created earlier
	-> Check various options available here:
		Activity
		Automatic scaling
		Instance management
		Monitoring
		Instance refresh
	

  Demo 2: Create Target Groups (for NLB & ALB)
  -------------------------------------------------

      ** Here we create two TGs, one each of 'Application Load Balancer' (ALB) and 'Network Load Balancer' (NLB)

	-> Click on 'Load Balancing' -> 'Target Group' left menu link (this one is for ALB)
		-> Choose a target type: Instances
		-> Target group name: some name (ex: TG-ALB)
		-> Health Checks -> Advanced health check settings
			-> Healthy threshold : 3
		-> Click Next
		-> Click 'Create Target Group' button

		Note: Here we are not adding any instances to this TG. We are going to add this to the ASG. 

	-> Click on 'Load Balancing' -> 'Target Group' left menu link (this one is for NLB)
		-> Choose a target type: Instances
		-> Protocol: TCP   (NLB routes on TCP, it can't route on HTTP)
		-> Target group name: some name (ex: TG-ALB)
		-> Health Checks -> Advanced health check settings
			-> Health check protocol: HTTP
			-> Healthy threshold : 3
		-> Click Next
		-> Click 'Create Target Group' button
	

  Demo 3: Network Load Balancer (NLB) & Application Load Balancer (ALB)
  ---------------------------------------------------------------------

	-> Allocate 3 Elastic IPs
		-> Click on Network & Security -> Elastic IP
		-> Click on 'Allocate Elastic IP address' button and Click 'Allocate' button	
		-> Do this three times.
		
		NOTE: We use these IP addresses to be allocated to three different subnets.

	-> Create a Network Load Balancer (NLB)
		-> Click on 'Load Balancing' -> 'Load Balancer' left menu option
		-> Click on 'Create load balancer' button
		-> Click on 'Create' button associated with 'Network Load Balancer'
			-> Load balancer name: MyNLB
			-> Scheme: Internet-facing
			-> IP address type: IPv4
			-> Network mapping
				-> VPC: keep the default
				-> Mappings
					-> Select three different Subnets (us-east-1a, 1b, 1c)
					-> IPv4 settings: Use an Elastic IP address
					-> IPv4 settings: Select on of the three IPs you created earlier
				   NOTE: make sure the three subnets are allotted with three different Elastic IPs.
			-> Listeners and routing
				-> Protocol: TCP
				-> Port: 80
				-> Default action: Select 'TG-NLB' (this is a LB which listens on TCP port)
			-> Click on 'Create Load Balancer' button

	-> Attach an NLB TG (target group) to the ASG (auto scaling group)
		-> Open the ASG (Auto Scaling -> Auto Scaling Groups)
		-> Select the ASG and click on 'Edit' button
		-> Go to 'Load balancing'
			-> Click on 'Application, Network or Gateway Load Balancer target groups'
			-> Select the Target group (here select TG-NLB)
		-> Check the instances health in the Target Group
			-> Go to Target Groups and select your TG
			   -> In the Instance tab, you should see instances in the TG
				   
	-> Check the DNS and Elastic IPs
		-> Open the Load balancer ('Load Balancing' -> 'Load Balancer')
		-> Copy the 'DNS name' (Basic Configuration in the Description tab)
		-> Paste it in a browser address bar. You should see the webpage you added to your instances.
		-> You should also see a similar page from two of the three IPs (as we have only two nodes)

	-> Delete the resources:
		-> Delete the Load balancer
		-> Disassociate and Release the elastic IPs. 
		   (you may need to wait a bit until load balancer is deleted)

	-> Attach an ALB TG (target group) to the ASG (auto scaling group)
		-> Open the Auto Scaling Group (Auto Scaling -> Auto Scaling Groups)
		-> Select the ASG
		-> Click 'Edit' on 'Load Balancing' 
		-> Delete the old TG and now select ALB-TG (targer group created for ALB)

	-> Check the instance in the ALB-TG
		-> Open the ALB-TG and check the instance in the 'Targets' tab.
		  -> Here the status shows as 'unused'. This is bacuse we no no load balancer attached yet.	
		  -> You can not get health-checks until an LB is added.	
				
	-> Create an Application Load Balancer (ALB)
		-> Click on 'Load Balancing' -> 'Load Balancer' left menu option
		-> Click on 'Create load balancer' button
		-> Click on 'Create' button associated with 'Application Load Balancer'
			-> Load balancer name: MyALB
			-> Scheme: Internet-facing
			-> IP address type: IPv4
			-> Network mapping
				-> VPC: keep the default
				-> Mappings
					-> Select three different Subnets (us-east-1a, 1b, 1c)
					-> IPv4 settings: Assigned by AWS
			-> Security groups: select secutiry group with HTTP access (ex: 'webaccess')
			   *NOTE: You can attach Security Group to ALB, but not to NLB.

			-> Listeners and routing
				-> Protocol: HTTP
				-> Port: 80
				-> Default action: Select 'TG-ALB' (this is a LB which listens on HTTP port)
			-> Click on 'Create Load Balancer' button
		-> Check the APB in action
			-> Open the ALB (make sure your are in 'Active' state, else wait a little while)
			-> Copy the 'DNS name' and paste it in the browser
			-> As you keep refreshing the browser, you get switched both instances alternativly. 


  Demo 3: ALB with Query String based routing
  -------------------------------------------

	-> Launch a new EC2 instance
		-> Launch a new EC2 instance
		-> Subnet: us-east-1a
		-> Add the followig code in the 'User Code'
		-----------------------------------------
		#!/bin/bash
		yum update -y
		yum install -y httpd
		systemctl start httpd
		systemctl enable httpd
		echo '<center><h1>This EC2 Instance is in App Group B</h1></center>' > /var/www/html/index.txt
		cp /var/www/html/index.txt /var/www/html/index.html
		-----------------------------------------

	-> Create a new target group and add the above instance to it

		-> Choose a target type: Instances
		-> Target group name: some name (ex: TG-ALB)
		-> Available instances: Select the EC2 instance you created earler and click on 'Include as pending below' button
			-> Here you are manually adding your instance to the TG
                           (Note: previously we attached the TG to an ASG)

        -> Add rules to your Load balancer to route between two TGs based on query string

		-> Open your Load balancer (MyALB created in your earlier steps/demos)
		-> Open 'Listeners' tab
		-> Click on 'View/edit rules' for the listerner HTTP:80
		-> Add new rules to route between TGs based on the query string
			-> Click in the "+" button at the top
			-> Click on 'Insert rule' link
				-> Click on 'Add condition'
					-> Choose 'Query string'
					   key: appgroup
					   value: a
				-> Click on 'Add action'
					-> Choose TG-ALB
				-> Click on the 'tick' icons below 'Add condition' & 'Add action'
				-> Click on 'Save' button
			-> Click on 'Insert rule' link again
				-> Click on 'Add condition'
					-> Choose 'Query string'
					   key: appgroup
					   value: b
				-> Click on 'Add action'
					-> Choose TG-ALB-2
				-> Click on the 'tick' icons below 'Add condition' & 'Add action'
				-> Click on 'Save' button
		-> Go back to the TG (TG-ALB-2) and see the instance in 'healthy' state 
		  (you may have to refresh once)
		-> Open the load balancer and copy the DNS.
		-> Open a browser and paste as follows: (replace <DNS> with the actual DNS of the LB)
			http://<DNS>?appgroup=a
			   => This will route the request between the two instance of TG-ALB
			http://<DNS>?appgroup=b
			   => This will route the request to the once instance of TG-ALB-2

		-> You are done. Terminate the instance your created for this.

		
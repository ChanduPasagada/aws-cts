  
  Lab 1: Setup and work with a Cloud9 instance
  --------------------------------------------

   1. Setup Cloud9 User and create a Cloud9 instance with that user

	1.1 Create a group  (ex: cts-cloud9-group)
	1.2 Attach AdministratorAccess Policy to the Group
	1.3 Create a user (ex: cloud9-user-1) with Programmatic & AWS MC access and add to the above group
	1.4 Login as the above user to AWS Management Console

   2. Create a Cloud9 instance

	2.1 Go to Cloud9 Console
	2.2 Click on 'Create environment' button
	2.3 Enter the details
		Name: awscloud9demo
		Environment type: Create a new EC2 instance for environment (direct access)
		Instance type: t2.micro (1 GiB RAM + 1 vCPU)
		Platform: Amazon Linux 2
	2.4 Finish the process by reviewing the setting and 'Create environment'
	2.5 This will lauch a Cloud9 environment window

   3. Know the IDE

	3.1 IDE has two main panes: Code editor (top-pane) and Terminals (bottom pane)
	     -> You can add more terminal windows etc. by clicking "+" button in the bottom pane
	     -> You can change settings (such as font-size) by clicking on cloud9 icon (top-left small icon)
		and selecting preferences. (ex: User Settings -> terminal to change terminal settings)

	3.2 Create a run a new python file
	     -> From the top main menu select: File -> New File 
	     -> Click Ctrl+S to save the file with a name. (ex: sample.py to create a python file)
	     -> Click on 'Run' button to run the python file.

   4. Cloud9 IDE - Validate some common services preinstalled with Cloud9.

	4.1 Open a terminal inside Cloud9 IDE

	4.1 Verify git, docker, httpd, python & java

		4.1.1 Type 'git' at the prompt and see the options being displayed.
			
			git

		4.1.2 Run the following commands to see the details about docker containers

			docker help
		 	docker ps
			docker ps -a
			sudo systemctl status docker

		4.3 Check httpd service
	
			sudo systemctl status httpd	

                4.4 Check python and java

			python   (lauches python3 shell)
			python2
		
			java -version
			javac -version
	
   5. Docker and AWS CLI on Cloud9 instance

    	By default, the Cloud9 instance inherits permissions from the user. 

	5.1 Check AWS CLI accesss
		
		aws s3 ls

	5.2 Docker - check, create, run and remove

		docker images
		docker run hello-world	[pull nad run hello-world docker image from Docker Hub]
		docker ps -a
		docker images  		(note down the image name or id fom this command)
		docker rm <name/id>  	(removes the docker container)
		docker rmi hello-world	(removes the docker image)
    
   6. Cloud9 and EC2

	Cloud9 is backed by an EC2 instance
	If we do not use Cloud9 instance for pr-configured time, EC2 instance will shutdown.
	
	6.1 Go to EC2 console and see that an EC2 instance corresponding to Cloud9 is running. 
	6.2 You can playaround with Security groups of this EC2 instance to control access to variaous services from Cloud9 terminal.


   7. Accessing web applications running on Cloud9 from your local machine (say your browser)

	7.1 Check if web server (httpd) is running or not (it won't by default, you can start it)

	7.2 Open Cloud9 terminal and start httpd service (if it is not already running)

		sudo systemctl status httpd
		sudo systemctl start httpd
	 	sudo systemctl status httpd

	7.3 Try to telnet into http port (port 80) to check of you can listen to the port from within your terminal.

		telnet
		sudo yum install telnet -y   (install telnet)
		telnet localhost 80
		(note:  you can exit the session by clicking Ctrl+Shift+]
			you can exit telnet by typeing 'quit' command)

		This proves that we can list to port 80 (HTTP) from within the terminal.

		Can we access http port from our browser???

       	7.4 Access web-server (port 80) running on Cloud9 instance from your local machine (via a browser)

		7.4.1 Go to the EC2 instance corresponding to your Cloud9 and copy the 'Public IPv4 DNS' of the EC2 instance.
		7.4.2 Now open a private (incognito) browser and type http://<Public IPv4 DNS>
			(ex: http://ec2-54-243-16-135.compute-1.amazonaws.com)
			
			This won't work. Because port 80 by default is not open to external traffic

		7.4.3 Open port 80 in the EC2 instance for external access (from your local browser)

			-> Open the 'Security Group' of the EC2 instance (from 'Security' tab)
			-> Add an Inbound rule to allow 'HTTP' from your IP address
			-> Try accessing the above URL one more time
			-> It should work now. 
	

	7.5 Elastic IP for your Cloud9 instance

		The problem with public IP address is every time your EC2 instance is rebooted it will get a new
		public IP address. If you are accessing Web-services that are running on EC2 via public IP address
		based DNS you need to change this every time you reboot the EC2 instance.

		** To avoid this it is good idea to assiocite an 'Elastic IP' to your EC2 instance. **	

	 	NOTE: Whenever the EC2 instance is rebooted, the httpd service will not start automatically
		      You have to manually start it by running the following command

				sudo systemctl start httpd




	


		
		









